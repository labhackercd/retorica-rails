#!/usr/bin/env ruby

## RAILS RUNNER ##

APP_PATH = File.expand_path('../../config/application',  __FILE__)
DOWNLOAD_PATH = File.expand_path('../../public/',  __FILE__)

require File.expand_path('../../config/boot',  __FILE__)

require APP_PATH

Rails.application.require_environment!


## THE SCRIPT ##

# Teste de Benchmark
time = Benchmark.realtime do

# Mininal Legislatura
NUM_LEGISLATURA = 54



url = "http://www.camara.leg.br/internet/deputado/DeputadosXML_52a55.zip"

"wget #{url} -p #{DOWNLOAD_PATH} -O deputados.zip"

# Salvando o arquivo dos deputados
open('../public/deputados.zip', 'wb') do |file|
  file << open(url).read

  # Extraindo os arquivos
  Zip::File.open(file) do |zip_file|
    zip_file.each do |entry|
      entry.extract("../public/deputados.xml") unless File.exists?("../public/deputados.xml")
    end
  end
end

# Array de Threads
threads = []


# Abrindo arquivo Hash
# Obtendo os deputados da 54ª legislatura (precisa ser melhorado depois)
hash = Hash.from_xml(File.open('../public/deputados.xml', "r:UTF-8"))

# Navegando na estrutura
deputados_hash = hash['orgao']['Deputados']['Deputado']


# Filtrando as legislaturas muito antigas
deputados_legislatura =  deputados_hash.select{ |deputado| deputado['numLegislatura'].to_i >= NUM_LEGISLATURA}




deputados_legislatura.each do |deputado|

  threads << Thread.new do
    ide_cadastro = deputado["ideCadastro"]
    numLegislatura = deputado['numLegislatura'].to_i

    # Criando a conexão com o Servidor da Câmara
    client = Savon.client(wsdl: 'http://www.camara.gov.br/SitCamaraWS/Deputados.asmx?wsdl')

    deputado_response_details = client.call(
      :obter_detalhes_deputado,
      :message => {
        :ideCadastro => ide_cadastro,
        :numLegislatura => numLegislatura
      }).to_hash.to_json

    deputado = JsonPath.on(deputado_response_details, '$..deputado')

    # Para cada deputado
    deputado.each do |item|
      #Obtém-se os dados Pessoais do Deputado
      nome_parlamentar = item['nome_parlamentar_atual']
      sexo = item['sexo']
      email = item['email']


      # Dados da Representação do Deputado
      unidade_federativa = UnidadeFederativa.find_or_create_by(:sigla => item['uf_representacao_atual'])
      situacao = item['situacao_na_legislatura_atual']

      # Localizando o partido Atual do Deputado
      partido_atual = Partido.find_or_create_by(
        :nome => item.assoc('partido_atual')[1]['nome'],
        :sigla => item.assoc('partido_atual')[1]['sigla']
      )

      deputado_instance = Deputado.find_or_create_by(
        :ide_cadastro => ide_cadastro,
        :site_deputado => " http://www.camara.leg.br/internet/deputado/Dep_Detalhe.asp?id=#{ide_cadastro}",
        :nome_parlamentar => nome_parlamentar,
        :sexo => sexo,
        :email => email,
        :situacao => situacao,
        :numLegislatura => numLegislatura,
        :clean_name => ActiveSupport::Inflector::transliterate(nome_parlamentar).strip
      )

      url_foto = "http://www.camara.gov.br/internet/deputado/bandep/#{ide_cadastro}.jpg"

      deputado_instance.foto = URI.parse(url_foto)
      deputado_instance.save
      unidade_federativa.deputados << deputado_instance
      partido_atual.deputados << deputado_instance
    end
  end

    # Juntando as Threads no Fim do Processamento
    threads.each do |thread|
      thread.join
    end
  end
end

puts "Base Atualizada em #{time} segundos"

